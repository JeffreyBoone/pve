[{"C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\index.js":"1","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\App.js":"2","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\reportWebVitals.js":"3","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\Card.js":"4","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\ConfirmDialog.jsx":"5","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\Dustbin.jsx":"6","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\Filter.js":"7","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\User.js":"8","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\AddPve.jsx":"9","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\SimpleSnackbar.jsx":"10"},{"size":517,"mtime":1612880583562,"results":"11","hashOfConfig":"12"},{"size":12043,"mtime":1613680545305,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":9690,"mtime":1613662840460,"results":"15","hashOfConfig":"12"},{"size":2436,"mtime":1613682958814,"results":"16","hashOfConfig":"12"},{"size":861,"mtime":1613647795245,"results":"17","hashOfConfig":"12"},{"size":3964,"mtime":1613647797716,"results":"18","hashOfConfig":"12"},{"size":4275,"mtime":1613652886122,"results":"19","hashOfConfig":"12"},{"size":3855,"mtime":1613680545278,"results":"20","hashOfConfig":"12"},{"size":1377,"mtime":1613749086857,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1rykxw6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\index.js",[],["48","49"],"C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\App.js",["50","51","52","53","54","55","56","57"],"import React, { useCallback, useRef, useEffect, useState } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { fade, makeStyles, useTheme, withStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport CardWidget from './components/Card';\r\nimport Filter from './components/Filter';\r\nimport User from './components/User';\r\nimport { Dustbin } from './components/Dustbin';\r\nimport Button from '@material-ui/core/Button';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport messages from './data.json';\r\nimport AddPveDialogRaw from './components/AddPve';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('md')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  topAppBar: {\r\n    [theme.breakpoints.up('md')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n    backgroundColor: \"#177F76\"\r\n\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('md')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n    top: 'auto',\r\n    bottom: 0,\r\n    backgroundColor: \"#177F76\"\r\n  },\r\n  add: {\r\n    flex: 1,\r\n    display: \"flex\"\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n\r\n  toolbar: {\r\n    height: 63\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(1),\r\n  },\r\n  text: {\r\n    padding: theme.spacing(2, 2, 0),\r\n  },\r\n  paper: {\r\n    paddingBottom: 50,\r\n  },\r\n  list: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  subheader: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  fabButton: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    top: -30,\r\n    left: 0,\r\n    right: 0,\r\n    margin: '0 auto',\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('xs')]: {\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst style = {\r\n  margin: 0,\r\n  top: 'auto',\r\n  right: 20,\r\n  bottom: 90,\r\n  left: 'auto',\r\n  position: 'fixed',\r\n};\r\n\r\nexport default function App(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const options = [\r\n    \"In Bewerking\",\r\n    \"Vastgesteld\",\r\n  ];\r\n\r\n  const handleMenuItemClick = useCallback(index => {\r\n    setSelectedIndex(index);\r\n  });\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleChange = () => { (selectedIndex == 0) ? setSelectedIndex(1) : setSelectedIndex(0) };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const Cards = () => {\r\n    return <div>\r\n      <Grid container>\r\n        {messages.filter(message => message.status === options[selectedIndex]).map(({ id, locked, projectnaam, projectnummer, type, header, subheader, date, publicatie, owner, status }) => (\r\n          <Grid item xs={12} sm={6} md={4} lg={3} xl={2} >\r\n            <CardWidget id={id} locked={locked} projectnaam={projectnaam} projectnummer={projectnummer} type={type} header={header} subheader={subheader} date={date} owner={owner} publicatie={publicatie} status={status} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>;\r\n  };\r\n\r\n  const AntSwitch = withStyles((theme) => ({\r\n    root: {\r\n      width: 28,\r\n      height: 16,\r\n      padding: 0,\r\n      display: 'flex',\r\n    },\r\n    switchBase: {\r\n      padding: 2,\r\n      color: theme.palette.grey[500],\r\n      '&$checked': {\r\n        transform: 'translateX(12px)',\r\n        color: theme.palette.common.white,\r\n        '& + $track': {\r\n          opacity: 1,\r\n          backgroundColor: theme.palette.primary.main,\r\n          borderColor: theme.palette.primary.main,\r\n        },\r\n      },\r\n    },\r\n    thumb: {\r\n      width: 12,\r\n      height: 12,\r\n      boxShadow: 'none',\r\n    },\r\n    track: {\r\n      border: `1px solid ${theme.palette.grey[500]}`,\r\n      borderRadius: 16 / 2,\r\n      opacity: 1,\r\n      backgroundColor: theme.palette.common.white,\r\n    },\r\n    checked: {},\r\n  }))(Switch);\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar}>\r\n        <CardHeader className={classes.header}\r\n          avatar={\r\n            <Avatar aria-label=\"recipe\" className={classes.avatar} />\r\n          }\r\n          action={\r\n            <User />\r\n          }\r\n          title=\"Jeffrey Boone\"\r\n          subheader=\"Stagaire\"\r\n        />\r\n      </div>\r\n      <Divider />\r\n      <List>\r\n        <ListItem style={{ flexDirection: 'row', justifyContent: 'center' }}>\r\n          <Button variant=\"contained\" color=\"secondary\" fullWidth=\"false\" onClick={handleClickOpen}>\r\n            Add PvE\r\n        </Button>\r\n        <AddPveDialogRaw\r\n          classes={{\r\n            paper: classes.paper,\r\n          }}\r\n          id=\"ringtone-menu\"\r\n          keepMounted\r\n          onClose={handleClose}\r\n          open={open}/>\r\n        </ListItem>\r\n        <ListItem style={{ flexDirection: 'row', justifyContent: 'center' }}>\r\n          <Typography component=\"div\">\r\n            <Grid component=\"label\" container alignItems=\"center\" spacing={2}>\r\n              <LockIcon />\r\n              <Grid item>\r\n                <AntSwitch checked={(selectedIndex == 0) && true} onChange={handleChange} name=\"checkedC\" />\r\n              </Grid>\r\n              <LockOpenOutlinedIcon />\r\n            </Grid>\r\n          </Typography>\r\n        </ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {[\"Test\", \"Values\", \"Only\", \"for\"].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {[\"Demo\"].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.topAppBar}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <img src=\"dali-bright.png\" alt=\"Italian Trulli\" width=\"30\" />\r\n          </IconButton>\r\n          <div className={classes.add}>\r\n            <Typography variant=\"h6\">\r\n              Pve\r\n          </Typography>\r\n            <Hidden smDown>\r\n              <Typography variant=\"h6\" className={classes.add}>\r\n                &nbsp;-&nbsp;Actueel overzicht\r\n          </Typography></Hidden></div>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        <Hidden mdUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden smDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <DndProvider backend={HTML5Backend}>\r\n          <div className={classes.toolbar} />\r\n          <Paper square className={classes.paper}>\r\n            <Hidden smUp>\r\n              <Filter handleMenuItemClick={handleMenuItemClick} selectedIndex={selectedIndex} options={options} />\r\n            </Hidden>\r\n            <List className={classes.list}>\r\n              <Cards />\r\n            </List>\r\n          </Paper>\r\n\r\n          <Hidden smDown>\r\n            <Dustbin />\r\n          </Hidden>\r\n\r\n          <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n              <Hidden mdUp>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerToggle}>\r\n                  <MenuIcon />\r\n                </IconButton>\r\n                <Fab color=\"secondary\" aria-label=\"add\" className={classes.fabButton} onClick={handleClickOpen}>\r\n                  <AddIcon />\r\n                </Fab>\r\n              </Hidden>\r\n              <div className={classes.grow} />\r\n              <IconButton edge=\"end\" color=\"inherit\">\r\n                <MoreIcon />\r\n              </IconButton>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </DndProvider>\r\n      </main>\r\n    </div>\r\n  );\r\n}","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\reportWebVitals.js",[],"C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\Card.js",["58"],"import React, { useCallback } from 'react'\r\nimport { withStyles, fade, makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport PersonAddDisabledIcon from '@material-ui/icons/PersonAddDisabled';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport { grey, blueGrey } from '@material-ui/core/colors';\r\nimport { useDrag } from 'react-dnd';\r\nimport ConfirmationDialogRaw from './ConfirmDialog';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: 2\r\n  },\r\n  actions: {\r\n    backgroundColor: blueGrey[100]\r\n  },\r\n  table: {\r\n    backgroundColor: grey[200]\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('xs')]: {\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n  text: {\r\n    padding: theme.spacing(2, 2, 0),\r\n  },\r\n  card: {\r\n    margin: 5,\r\n  },\r\n  tableHead: {\r\n    fontWeight: 'bold'\r\n  },\r\n  paper: {\r\n  },\r\n  list: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  subheader: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  test: {\r\n    width: \"0\",\r\n    backgroundColor: \"black\"\r\n  },\r\n  topAppBar: {\r\n    backgroundColor: \"#177F76\"\r\n  },\r\n  appBar: {\r\n    top: 'auto',\r\n    bottom: 0,\r\n    backgroundColor: \"#177F76\"\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  fabButton: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    top: -30,\r\n    left: 0,\r\n    right: 0,\r\n    margin: '0 auto',\r\n  },\r\n\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  formControl: {\r\n\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: \"#004D44\",\r\n  },\r\n  header: {\r\n    backgroundColor: \"#177F76\"\r\n  }\r\n}));\r\n\r\nconst style = {\r\n  border: '1px dashed gray',\r\n  backgroundColor: 'white',\r\n  cursor: 'move',\r\n  width: \"100%\",\r\n};\r\n\r\n\r\nexport default function CardWidget(props) {\r\n  //\r\n  var namesList = [\r\n    { name: \"Projectnaam\", id: props.projectnaam },\r\n    { name: \"Projectnummer\", id: props.projectnummer },\r\n    { name: \"Type\", id: props.type },\r\n    { name: \"Publicatie\", id: props.publicatie }\r\n  ];\r\n\r\n  const ColorButton = withStyles((theme) => ({\r\n    root: {\r\n      color: green[500],\r\n      '&:hover': {\r\n        color: green[700],\r\n      },\r\n    },\r\n  }))(Button);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const [list, setList] = React.useState(namesList);\r\n\r\n  const handleClose = (newValue) => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleRemove = useCallback(name => {\r\n    setList(list.filter(item => item.name !== name));\r\n    console.log(name)\r\n  });\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  const Box = ({ name, value }) => {\r\n    const [{ isDragging }, drag] = useDrag({\r\n      item: { name, type: \"item\" },\r\n      end: (item, monitor) => {\r\n        const dropResult = monitor.getDropResult();\r\n        if (item && dropResult) {\r\n          setOpen(true)\r\n        }\r\n      },\r\n      collect: (monitor) => ({\r\n        isDragging: monitor.isDragging(),\r\n      }),\r\n    });\r\n    const opacity = isDragging ? 0.4 : 1;\r\n\r\n    return (\r\n      <TableRow ref={drag} style={{ ...style, opacity }} key={props.publicatie} >\r\n        <TableCell component=\"th\" scope=\"row\">{name}</TableCell>\r\n        <TableCell align=\"right\">{value}</TableCell>\r\n        <ConfirmationDialogRaw\r\n          classes={{\r\n            paper: classes.paper,\r\n          }}\r\n          id=\"ringtone-menu\"\r\n          keepMounted\r\n          open={open}\r\n          onClose={handleClose}\r\n          test={() => handleRemove(name)} />\r\n      </TableRow>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <React.Fragment key={props.id}>\r\n        <Card className={classes.card}>\r\n          <CardHeader className={classes.header}\r\n            avatar={\r\n              <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                {(props.status === \"In Bewerking\") && <div id=\"myDiv\">\r\n                  <LockOpenOutlinedIcon />\r\n                </div>\r\n                }\r\n                {(props.status === \"Vastgesteld\") && <div id=\"myDiv\">\r\n                  <LockIcon />\r\n                </div>\r\n                }\r\n              </Avatar>\r\n            }\r\n            action={\r\n              <IconButton aria-label=\"settings\">\r\n                <MoreVertIcon />\r\n              </IconButton>\r\n            }\r\n            title={props.owner}\r\n            subheader={props.date}\r\n          />\r\n          <TableContainer>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className={classes.tableHead}>{props.header}</TableCell>\r\n                  <TableCell className={classes.tableHead} align=\"right\">{props.subheader}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                  {list.map(list => {\r\n                    return (\r\n                      <Box name={list.name} value={list.id} deleter={handleRemove} />\r\n                    );\r\n                  })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <CardActions disableSpacing className={classes.actions}>\r\n            <Hidden smUp> {/* open in browser only visible when below sm */}\r\n              <Button className={classes.button} variant=\"contained\" color=\"primary\" aria-label=\"open in browser\">\r\n                <OpenInBrowserIcon />\r\n              </Button>\r\n            </Hidden>\r\n            <IconButton className={classes.button} aria-label=\"share\">\r\n              <DeleteForeverIcon />\r\n            </IconButton>\r\n            <Button className={classes.button} variant=\"outlined\" color=\"secondary\" aria-label=\"PersonAddDisabledIcon\">\r\n              <PersonAddDisabledIcon />\r\n            </Button>\r\n            <ColorButton className={classes.button} variant=\"outlined\" color=\"primary\" aria-label=\"PersonAddDisabledIcon\">\r\n              <PersonAddIcon />\r\n            </ColorButton>\r\n            <IconButton\r\n              className={clsx(classes.expand, {\r\n                [classes.expandOpen]: expanded,\r\n              })}\r\n              onClick={handleExpandClick}\r\n              aria-expanded={expanded}\r\n              aria-label=\"show more\"\r\n            >\r\n              <ExpandMoreIcon />\r\n            </IconButton>\r\n          </CardActions>\r\n          <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n            <TableContainer>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell className={classes.tableHead}>Hier</TableCell>\r\n                    <TableCell className={classes.tableHead} align=\"right\">Komt</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <TableRow key={props.projectnaam}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      Extra\r\n                            </TableCell>\r\n                    <TableCell align=\"right\">Info</TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Collapse>\r\n        </Card>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n}","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\ConfirmDialog.jsx",["59","60","61","62"],"import React from 'react'\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PropTypes from 'prop-types';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport SimpleSnackbar from './SimpleSnackbar';\r\n\r\nexport default function ConfirmationDialogRaw(props) {\r\n    const { onClose, value: valueProp, test, open, ...other } = props;\r\n    const [value, setValue] = React.useState(valueProp);\r\n    const radioGroupRef = React.useRef(null);\r\n    const [state, setState] = React.useState({\r\n      open1: false,\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    });\r\n  \r\n    const { vertical, horizontal, open1 } = state;\r\n  \r\n    React.useEffect(() => {\r\n      if (!open) {\r\n        setValue(valueProp);\r\n      }\r\n    }, [valueProp, open]);\r\n  \r\n    const handleEntering = () => {\r\n      if (radioGroupRef.current != null) {\r\n        radioGroupRef.current.focus();\r\n      }\r\n    };\r\n  \r\n    const handleCancel = () => {\r\n      onClose();\r\n    };\r\n  \r\n    const handleOk = () => {\r\n      onClose(value);\r\n      test()\r\n      handleClick({ vertical: 'top', horizontal: 'center' });\r\n    };\r\n  \r\n    const handleClick = (newState) => () => {\r\n      setState({ open1: true, ...newState });\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setState({ ...state, open1: false });\r\n    };\r\n  \r\n    return (\r\n      <Dialog\r\n        disableBackdropClick\r\n        disableEscapeKeyDown\r\n        maxWidth=\"xs\"\r\n        onEntering={handleEntering}\r\n        aria-labelledby=\"confirmation-dialog-title\"\r\n        open={open}\r\n        {...other}\r\n      >\r\n        <DialogTitle id=\"confirmation-dialog-title\">Are you sure you want to delete this item?</DialogTitle>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleCancel} color=\"primary\">\r\n            Cancel\r\n            </Button>\r\n          <Button onClick={handleOk} color=\"primary\">\r\n            Ok\r\n            </Button>\r\n            <SimpleSnackbar\r\n         \r\n          id=\"ringtone-menu\"\r\n          keepMounted\r\n          onClose={handleClose}\r\n          open={open}/>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n  \r\n  ConfirmationDialogRaw.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n  };","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\Dustbin.jsx",["63"],"import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nconst style = {\r\n    margin: 0,\r\n    top: 'auto',\r\n    right: 20,\r\n    bottom: 90,\r\n    left: 'auto',\r\n    position: 'fixed',\r\n    display: \"\"\r\n};\r\nexport const Dustbin = () => {\r\n    const [{ canDrop, isOver }, drop] = useDrop({\r\n        accept: \"item\",\r\n        drop: () => ({ name: 'the Dustbin' }),\r\n        collect: (monitor) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    });\r\n    const isActive = canDrop && isOver;\r\n\r\n    return (\r\n        <Fab ref={drop} style={style} size='large' variant='extended' color=\"primary\" aria-label=\"add\">\r\n            Drag here to delete &nbsp;\r\n            <DeleteIcon />\r\n        </Fab>\r\n    );\r\n};\r\n","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\Filter.js",[],"C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\User.js",[],"C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\AddPve.jsx",["64","65","66","67","68","69","70"],"import React from 'react'\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport PropTypes from 'prop-types';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nexport default function AddPveDialogRaw(props) {\r\n    const { onClose, value: valueProp, test, open, ...other } = props;\r\n    const [value, setValue] = React.useState(valueProp);\r\n    const radioGroupRef = React.useRef(null);\r\n    const [state, setState] = React.useState({\r\n      open1: false,\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    });\r\n  \r\n    const { vertical, horizontal, open1 } = state;\r\n  \r\n    React.useEffect(() => {\r\n      if (!open) {\r\n        setValue(valueProp);\r\n      }\r\n    }, [valueProp, open]);\r\n  \r\n    const handleEntering = () => {\r\n      if (radioGroupRef.current != null) {\r\n        radioGroupRef.current.focus();\r\n      }\r\n    };\r\n  \r\n    const handleCancel = () => {\r\n      onClose();\r\n    };\r\n  \r\n    const handleOk = () => {\r\n      onClose(value);\r\n      test()\r\n      handleClick({ vertical: 'top', horizontal: 'center' });\r\n    };\r\n  \r\n    const handleClick = (newState) => () => {\r\n      setState({ open1: true, ...newState });\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setState({ ...state, open1: false });\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n      };\r\n    \r\n  \r\n    return (\r\n     <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">PvE Toevoegen</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Hier komt veel meer te staan is nu alleen als ontwerp bedoelt. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis arcu est, sollicitudin sit amet odio eu, consequat auctor nulla. Sed et fermentum nisi, vitae cursus felis.</DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Projectnaam\"\r\n            type=\"email\"\r\n            fullWidth\r\n          />          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Projectnummer\"\r\n            type=\"email\"\r\n            fullWidth\r\n          />\r\n          <FormControl component=\"fieldset\" style={({ marginTop: '0.8rem' })}>\r\n            <FormLabel component=\"legend\">Type</FormLabel>\r\n            <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n              <FormControlLabel value=\"beheer\" control={<Radio color=\"primary\" />} label=\"Beheer\" />\r\n              <FormControlLabel value=\"onderhoud\" control={<Radio color=\"primary\" />} label=\"Onderhoud\" />\r\n              <FormControlLabel value=\"nieuwbouw\" control={<Radio color=\"primary\" />} label=\"Nieuwbouw\" />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCancel} color=\"primary\">\r\n            Cancel\r\n    </Button>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Add\r\n    </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n  \r\n  AddPveDialogRaw.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n  };","C:\\Users\\jeffr\\OneDrive\\Documenten\\GitHub\\pve\\src\\components\\SimpleSnackbar.jsx",["71","72","73","74","75","76","77","78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":30,"nodeType":"85","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"87","line":1,"column":38,"nodeType":"85","messageId":"86","endLine":1,"endColumn":47},{"ruleId":"83","severity":1,"message":"88","line":1,"column":49,"nodeType":"85","messageId":"86","endLine":1,"endColumn":57},{"ruleId":"89","severity":1,"message":"90","line":79,"column":3,"nodeType":"91","messageId":"92","endLine":79,"endColumn":10},{"ruleId":"83","severity":1,"message":"93","line":152,"column":7,"nodeType":"85","messageId":"86","endLine":152,"endColumn":12},{"ruleId":"94","severity":1,"message":"95","line":174,"column":31,"nodeType":"85","endLine":174,"endColumn":42},{"ruleId":"96","severity":1,"message":"97","line":188,"column":47,"nodeType":"98","messageId":"92","endLine":188,"endColumn":49},{"ruleId":"96","severity":1,"message":"97","line":274,"column":52,"nodeType":"98","messageId":"92","endLine":274,"endColumn":54},{"ruleId":"94","severity":1,"message":"95","line":188,"column":24,"nodeType":"85","endLine":188,"endColumn":35},{"ruleId":"83","severity":1,"message":"99","line":6,"column":8,"nodeType":"85","messageId":"86","endLine":6,"endColumn":16},{"ruleId":"83","severity":1,"message":"100","line":20,"column":13,"nodeType":"85","messageId":"86","endLine":20,"endColumn":21},{"ruleId":"83","severity":1,"message":"101","line":20,"column":23,"nodeType":"85","messageId":"86","endLine":20,"endColumn":33},{"ruleId":"83","severity":1,"message":"102","line":20,"column":35,"nodeType":"85","messageId":"86","endLine":20,"endColumn":40},{"ruleId":"83","severity":1,"message":"103","line":24,"column":11,"nodeType":"85","messageId":"86","endLine":24,"endColumn":19},{"ruleId":"83","severity":1,"message":"104","line":17,"column":55,"nodeType":"85","messageId":"86","endLine":17,"endColumn":60},{"ruleId":"83","severity":1,"message":"100","line":26,"column":13,"nodeType":"85","messageId":"86","endLine":26,"endColumn":21},{"ruleId":"83","severity":1,"message":"101","line":26,"column":23,"nodeType":"85","messageId":"86","endLine":26,"endColumn":33},{"ruleId":"83","severity":1,"message":"102","line":26,"column":35,"nodeType":"85","messageId":"86","endLine":26,"endColumn":40},{"ruleId":"83","severity":1,"message":"105","line":34,"column":11,"nodeType":"85","messageId":"86","endLine":34,"endColumn":25},{"ruleId":"83","severity":1,"message":"106","line":44,"column":11,"nodeType":"85","messageId":"86","endLine":44,"endColumn":19},{"ruleId":"83","severity":1,"message":"107","line":58,"column":11,"nodeType":"85","messageId":"86","endLine":58,"endColumn":23},{"ruleId":"83","severity":1,"message":"104","line":8,"column":55,"nodeType":"85","messageId":"86","endLine":8,"endColumn":60},{"ruleId":"83","severity":1,"message":"108","line":9,"column":12,"nodeType":"85","messageId":"86","endLine":9,"endColumn":17},{"ruleId":"83","severity":1,"message":"109","line":9,"column":19,"nodeType":"85","messageId":"86","endLine":9,"endColumn":27},{"ruleId":"83","severity":1,"message":"110","line":10,"column":11,"nodeType":"85","messageId":"86","endLine":10,"endColumn":24},{"ruleId":"83","severity":1,"message":"111","line":11,"column":19,"nodeType":"85","messageId":"86","endLine":11,"endColumn":27},{"ruleId":"83","severity":1,"message":"100","line":17,"column":13,"nodeType":"85","messageId":"86","endLine":17,"endColumn":21},{"ruleId":"83","severity":1,"message":"101","line":17,"column":23,"nodeType":"85","messageId":"86","endLine":17,"endColumn":33},{"ruleId":"83","severity":1,"message":"102","line":17,"column":35,"nodeType":"85","messageId":"86","endLine":17,"endColumn":40},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","no-dupe-keys","Duplicate key 'toolbar'.","ObjectExpression","unexpected","'style' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Snackbar' is defined but never used.","'vertical' is assigned a value but never used.","'horizontal' is assigned a value but never used.","'open1' is assigned a value but never used.","'isActive' is assigned a value but never used.","'other' is assigned a value but never used.","'handleEntering' is assigned a value but never used.","'handleOk' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'radioGroupRef' is assigned a value but never used.","'setState' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]